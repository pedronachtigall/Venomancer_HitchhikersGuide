#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
packages<-c("readxl","ggpubr","patchwork","ggplot2","cowplot",
"dplyr","tidyverse","flextable",
"compositions","reshape2","zCompositions","RColorBrewer",
"phytools","ggfortify","robCompositions","pheatmap","gplots",
"DESeq2","edgeR")
#lapply(packages, library, character.only=T)
invisible(lapply(packages, library, character.only=T))
rm(packages)
source("./PlottingFunctions.R")
A<-ggbarplot(toxin_colors_df, "V2","V3", fill=toxin_colors_df$V1, width = 1, xlab="",
ylab="", main="toxin colors") + rotate_x_text(angle = 45)
B<-ggbarplot(old_colors_df, "V2","V3", fill=old_colors_df$V1, width = 1, xlab="",
ylab="", main="old colors") + rotate_x_text(angle = 45)
A / B
rm(A,B)
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
View(ExpressionPie)
tmp_out1 <- cmultRepl(t(TPM_df),output = "p-counts")
View(TPM_df)
tmp_out1 <- cmultRepl(t(TPM_df[,4:11]),output = "p-counts")
View(tmp_out1)
tmp_out1 <- cmultRepl(TPM_df[,4:11],output = "p-counts")
View(tmp_out1)
tmp_out1 <- cmultRepl(t(TPM_df[,4:11]),output = "p-counts")
tmp_out1 <- t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts"))
View(tmp_out1)
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
TMP_df[,4:11] <- t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts"))
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
TPM_df[,4:11] <- t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts"))
View(TPM_df)
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
View(TPM_df)
TPM_df[,4:11] <- t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts"))
TPM_df2 <- cbind(TPM_df[,1:3],t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts")))
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
TPM_df2 <- cbind(TPM_df[,1:3],t(cmultRepl(t(TPM_df[,4:11]),output = "p-counts")))
View(TPM_df2)
TPM_df2 <- cbind(TPM_df[,1:3],t(cmultRepl(t(TPM_df[,4:12]),output = "p-counts")))
View(TPM_df2)
LoseZeros(TPM_df,"TPM_df3","TPM_df2")
View(TPM_df2)
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
packages<-c("readxl","ggpubr","patchwork","ggplot2","cowplot",
"dplyr","tidyverse","flextable",
"compositions","reshape2","zCompositions","RColorBrewer",
"phytools","ggfortify","robCompositions","pheatmap","gplots",
"DESeq2","edgeR")
#lapply(packages, library, character.only=T)
invisible(lapply(packages, library, character.only=T))
rm(packages)
source("./PlottingFunctions.R")
ggbarplot(toxin_colors_df, "V2","V3", fill=toxin_colors_df$V1, width = 1, xlab="",
ylab="", main="toxin colors") + rotate_x_text(angle = 45)
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
# Impute 0 values
TPM_df2 <- cbind(TPM_df[,1:3],t(cmultRepl(t(TPM_df[,4:12]),output = "p-counts")))
rownames(TPM_df2)<-TPM_df2$gene_id
# Summing data by toxin class
TPM_class_df<-as.data.frame(TPM_df2 %>% group_by(toxin_class,class) %>%
summarize_if(is_numeric,sum) %>% arrange(desc(Average)))
rownames(TPM_class_df)<-TPM_class_df$Toxin_ID
Counts_class_df<-as.data.frame(Counts_df %>% group_by(toxin_class,class) %>%
summarize_if(is_numeric,sum))
rownames(Counts_class_df)<-Counts_class_df$toxin_class
# Log/CLR transforming data
TPM_df2_log<-TPM_df2 %>% mutate_if(is.numeric,log) # can change to clr
TPM_df2_log<-TPM_df2_log[order(-TPM_df2_log$Average),]
rownames(TPM_df2_log)<-TPM_df2_log$gene_id
TPM_class_df_log<-TPM_class_df %>% mutate_if(is.numeric,log) # can change to clr
TPM_class_df_log<-TPM_class_df_log[order(-TPM_class_df_log$Average),]
rownames(TPM_class_df_log)<-TPM_class_df_log$Toxin_ID
FullTranscriptomePlot(TPM_df2,"CLP2057",class="class")
ToxinBarplot(TPM_df2,"CLP2057",class="class",toxin_class="toxin_class", colors=toxin_colors)
ExpressionPie(TPM_df2,"CLP2057",class="class",toxin_class="toxin_class", colors=toxin_colors)
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
packages<-c("readxl","ggpubr","patchwork","ggplot2","cowplot",
"dplyr","tidyverse","flextable",
"compositions","reshape2","zCompositions","RColorBrewer",
"phytools","ggfortify","robCompositions","pheatmap","gplots",
"DESeq2","edgeR")
#lapply(packages, library, character.only=T)
invisible(lapply(packages, library, character.only=T))
rm(packages)
source("./PlottingFunctions.R")
ggbarplot(toxin_colors_df, "V2","V3", fill=toxin_colors_df$V1, width = 1, xlab="",
ylab="", main="toxin colors") + rotate_x_text(angle = 45)
#setwd("PATH/TO/RSEM/RESULTS")
TPM_df<-read_excel("./RSEM.xlsx", sheet="TPM", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
Counts_df<-read_excel("./RSEM.xlsx", sheet="ExpectedCounts", col_types=c(rep("text",3),
rep("numeric",8),
"text"))
samples <- read_excel("./samples.xlsx",sheet = "TranscriptomeSamples")
# Removing Extraneous Columns and Calculating Average TPM
TPM_df <- TPM_df[,1:11]
TPM_df$Average<-rowMeans(TPM_df[,4:11])
# Impute 0 values
TPM_df2 <- cbind(TPM_df[,1:3],t(cmultRepl(t(TPM_df[,4:12]),output = "p-counts")))
rownames(TPM_df2)<-TPM_df2$gene_id
# Summing data by toxin class
TPM_class_df<-as.data.frame(TPM_df2 %>% group_by(toxin_class,class) %>%
summarize_if(is_numeric,sum) %>% arrange(desc(Average)))
rownames(TPM_class_df)<-TPM_class_df$Toxin_ID
Counts_class_df<-as.data.frame(Counts_df %>% group_by(toxin_class,class) %>%
summarize_if(is_numeric,sum))
rownames(Counts_class_df)<-Counts_class_df$toxin_class
# Log/CLR transforming data
TPM_df2_log<-TPM_df2 %>% mutate_if(is.numeric,log) # can change to clr
TPM_df2_log<-TPM_df2_log[order(-TPM_df2_log$Average),]
rownames(TPM_df2_log)<-TPM_df2_log$gene_id
TPM_class_df_log<-TPM_class_df %>% mutate_if(is.numeric,log) # can change to clr
TPM_class_df_log<-TPM_class_df_log[order(-TPM_class_df_log$Average),]
rownames(TPM_class_df_log)<-TPM_class_df_log$Toxin_ID
FullTranscriptomePlot(TPM_df2,"CLP2057",class="class")
ToxinBarplot(TPM_df2,"CLP2057",class="class",toxin_class="toxin_class", colors=toxin_colors)
ExpressionPie(TPM_df2,"CLP2057",class="class",toxin_class="toxin_class", colors=toxin_colors)
FancyFigure(TPM_df2,"CLP2057",class="class",toxin_class="toxin_class", colors=toxin_colors)
#for(i in c(samples$ID,"Average")){
#  svg(paste0(i,"_FancyFigure.svg"),width=12,height=8.5)
#  FancyFigure(TPM_df2,i,class="class",toxin_class="toxin_class", colors=toxin_colors)
#  dev.off()
#}
TransCompPlot(TPM_df2, "CLP2057", "CLP2065")
metadata<-as.data.frame(unclass(samples[,c("Subspecies","NontoxPhylo","Sex","SVL_cm")]))
rownames(metadata)<-samples$ID
# Toxin Transcripts
TPM_df2_log_tox<-subset(TPM_df2_log,TPM_df2_log$class=="Toxin")
rownames(TPM_df2_log_tox)<-TPM_df2_log_tox$gene_id
pheatmap(TPM_df2_log_tox[,4:11], cluster_rows=T, show_rownames=F,cluster_cols=T,
annotation_col=metadata, annotation_legend=T)
# Toxin Classes
TPM_class_df_log_tox<-subset(TPM_class_df_log,TPM_class_df_log$class=="Toxin")
rownames(TPM_class_df_log_tox)<-TPM_class_df_log_tox$Toxin_ID
pheatmap(TPM_class_df_log_tox[,3:10], cluster_rows=F, show_rownames=T,cluster_cols=T,
annotation_col=metadata, annotation_legend=T)
Tree<-read.tree(file="./tree.nwk")
# Toxin Transcripts
phylo.heatmap(Tree, t(TPM_df2_log_tox[,4:11]), fsize=c(1,0.8,1), standardize=F,
split=c(0.3,0.7), ylim=c(-0.25,1.25), grid=T,
colors=colorRampPalette(rev(brewer.pal(n = 7,name="RdYlBu")))(100))
# Toxin Classes
phylo.heatmap(Tree, t(TPM_class_df_log_tox[,3:10]), fsize=c(1,0.8,1), standardize=F,
split=c(0.3,0.7), ylim=c(-0.25,1.25), grid=T,
colors=colorRampPalette(rev(brewer.pal(n = 7,name="RdYlBu")))(100))
PCA <- prcomp(as.data.frame(t(clr(TPM_df2[,4:11]))), center=TRUE, scale=TRUE)
PCA_df<-data.frame(metadata,PCA$x)
plot(PCA, type='l')
summary(PCA)
PC1<-round((PCA$sdev^2/sum(PCA$sdev^2))*100,2)[1]
PC2<-round((PCA$sdev^2/sum(PCA$sdev^2))*100,2)[2]
ggscatter(PCA_df,"PC1","PC2",color="NontoxPhylo",fill="NontoxPhylo",size=8,
ellipse = T, ellipse.level = 0.95, ellipse.type = "norm",
xlab = paste0("PC1 (",PC1,"%)"), ylab=paste0("PC2 (",PC2,"%)"))
DESeq_df<-as.data.frame(Counts_df[,4:11])
rownames(DESeq_df)<-Counts_df$gene_id
DESeq_df<-as.matrix(DESeq_df)
for (i in 1:ncol(DESeq_df)){
DESeq_df[,i]<-as.integer(DESeq_df[,i])
}
## SVL Comparison
DESeq2<-DESeqDataSetFromMatrix(DESeq_df,metadata, design = ~SVL_cm)
DESeq2<-DESeq(DESeq2,fitType = "local")
DESeq2_res <- as.data.frame(results(DESeq2,alpha=0.05))
table<-DESeq2_res[DESeq2_res$padj<0.05,]
table<-head(table[complete.cases(table),c(2,6)])
#                                                       log2FoldChange       padj
#Ccera-CLP2057ext_CTL-9_ngenContig2269_-_CDS                0.29425216 0.02338078
#Ccera-CLP2105ext_MYO-2_extContig94_-_CDS                   0.39747275 0.02338078
#Ccera-CLP2057_SVMPIII_extContig339_-_CDS                  -0.28421367 0.02338078
#Ccera-CLP2057ext_SVMPIII-2_extContig390_-_CDS             -0.17398424 0.02338078
#Ccera-CLP2057ext_ADH_ngenContig195_-_CDS                  -0.06053533 0.03895370
#Ccera-CLP2065ngen_AminoAcidTrans1_ngenContig5623_-_CDS     0.12298525 0.04642247
## Phylogenetic Comparison
DESeq2<-DESeqDataSetFromMatrix(DESeq_df,metadata, design = ~NontoxPhylo)
DESeq2<-DESeq(DESeq2)
DESeq2_res <- as.data.frame(results(DESeq2,
contrast=c("NontoxPhylo","S_Mojave","N_Mojave"),
alpha=0.05))
table<-DESeq2_res[DESeq2_res$padj<0.05,]
table<-head(table[complete.cases(table),c(2,6)])
#                                                log2FoldChange         padj
#Ccera-KW1744ext_BPP-1a_extContig132_-_CDS             7.075668 5.189999e-08
#Ccera-CLP2057ext_PLA2-1a_extContig89_-_CDS            2.148142 4.467611e-02
#Ccera-CLP2105ext_SVMPII-4_extContig172_-_CDS         -3.352636 3.900254e-02
#Ccera-CLP2105ngen_SVSP-10_ngenContig295_-_CDS        -2.698754 1.105192e-02
#Ccera-CLP2057ext_VEGF-1_extContig1_-_CDS              2.441901 4.789369e-02
#Ccera-CLP2071ngen_39SrpL24_ngenContig6518_-_CDS       2.442785 2.608682e-07
edgeR_df <- DGEList(counts=DESeq_df,samples=metadata)
keep <- rowSums(cpm(edgeR_df)>1) >= 2
edgeR_df <- edgeR_df[keep, , keep.lib.sizes=FALSE]
rm(keep)
edgeR_df <- calcNormFactors(edgeR_df)
# SVL Comparison
design <- model.matrix(~SVL_cm, data=edgeR_df$samples)
dispersion <- estimateDisp(edgeR_df,design)
fit <- glmFit(dispersion,design)
edgeR_res<-as.data.frame(topTags(glmLRT(fit,coef="SVL_cm"),n=Inf,sort.by="none"))
table<-edgeR_res[edgeR_res$FDR<0.05,]
table<-head(table[complete.cases(table),c(1,5)])
#                                                     logFC        FDR
#Ccera-CLP2057ext_CTL-9_ngenContig2269_-_CDS      0.2943580 0.02230040
#Ccera-CLP2057ext_SVMPIII-2_extContig390_-_CDS   -0.1744778 0.03014379
#Ccera-CLP2057ext_NucRec4A1_ngenContig2966_-_CDS -0.1933113 0.02230040
# Phylogenetic Comparison
design <- model.matrix(~NontoxPhylo, data=edgeR_df$samples)
dispersion <- estimateDisp(edgeR_df,design)
fit <- glmFit(dispersion,design)
edgeR_res<-as.data.frame(topTags(glmLRT(fit,
coef=c("NontoxPhyloN_Mojave","NontoxPhyloS_Mojave")),
n=Inf,sort.by="none"))
table<-edgeR_res[edgeR_res$FDR<0.05,]
table<-head(table[complete.cases(table),c(1,5)])
#                                                     logFC.NontoxPhyloN_Mojave       PValue
#Ccera-KW1744ext_BPP-1a_extContig132_-_CDS                            -3.483285 3.416361e-06
#Ccera-CLP2057ext_CTL-5_extContig12_-_CDS                             -2.873082 5.439565e-04
#Ccera-CLP2105ext_MYO-2_extContig94_-_CDS                              9.956143 4.379644e-12
#Ccera-CLP2071ngen_39SrpL24_ngenContig6518_-_CDS                      -2.073622 1.091375e-06
#Ccera-CLP2057ext_3bHDDIsom_ngenContig4815_-_CDS                      -2.327748 8.408196e-04
#Ccera-CLP2071ngen_ADPRibosyl1-2_ngenContig5670_-_CDS                  0.000000 6.485014e-34
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
install_tinytex()
tinytex::reinstall_tinytex()
tinytex::tinytex_root()
?tinytex::latexmk
library(rmarkdown)
render("VenomancerHitchhikersGuide.Rmd",output_file="README.md", md_document(variant = "markdown_github", toc=T, toc_depth=2))
library(rmarkdown)
render("VenomancerHitchhikersGuide.Rmd",output_file="README.md", md_document(variant = "markdown_github", toc=T, toc_depth=2))
?render
?rmarkdown::render
library(rmarkdown)
render("VenomancerHitchhikersGuide.Rmd",output_file="README_new.md", md_document(variant = "markdown_github", toc=T, toc_depth=2))
library(rmarkdown)
render("VenomancerHitchhikersGuide.Rmd",output_file="README.md", md_document(variant = "markdown_github", toc=T, toc_depth=2))
